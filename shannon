#! /usr/bin/python

# 
# Divides the data into grids, exports to file, calculates shannon entropy
# C. Dalgicdir


class Rama:
    

    def __init__ (self, filename, grids, start, end, interval = 0, isenerg = 0): # + min,max or min+max, delta = 12
        
        self._count = -1
        self.filename = filename
        self.min = {}
        self.max = {}
        
        try:
            self.file = open (filename, 'r')
        except IOError:
            print >> sys.stderr, "File could not be opened\n"
            sys.exit(1)
            
        self.Ndih = 0
	self.min, self.max = self.MinMax()
	if interval:
	    if len(interval) == 2:
		for i in range(len(self.min)):
		    if self.min[i] < interval[0]:
			print "Warning! Minimum value in the data in column %s: %s is lower than the interval set %s!" %(i+1,self.min[i],interval[0])
		    if self.max[i] > interval[1]:
			print "Warning! Maximum value in the data in column %s: %s is higher than the interval set %s!" %(i+1,self.max[i],interval[1])
		    self.min[i] = interval[0]
		    self.max[i] = interval[1]
	    elif len(interval) < len(self.min):
		print "Error! Length of the interval and number of dihedrals do not match!"
		sys.exit(1)
	    elif len(interval)/2 == len(self.min):
		for i in range(len(self.min)):
		    if self.min[i] < interval[2*i]:
			print "Warning! Minimum value in the data %s is lower than the interval set %s!" %(self.min[i],interval[2*i])
		    if self.max[i] > interval[2*i+1]:
			print "Warning! Maximum value in the data %s is higher than the interval set %s!" %(self.max[i],interval[2*i-1])
		    self.min[i] = interval[2*i]
		    self.max[i] = interval[2*i+1]
        self.Nbins = grids
        
        if len(grids) == 1 and len(self.max) != 1:
            for i in range(len(self.max)-1):
                self.Nbins.append(grids[0])
            
        self.Nbins = grids
        self.amplitude = {}
        self.delta = {}
        self.start = start
        self.end = end
        self._bins = {}
        
        if not len(self.max) is len(self.min):
            print "Error, length of maximum and minimum dictionaries are not the same"
            sys.exit(1)
        
        for i in range (len(self.max)):
            self.amplitude[i] = self.max[i] - self.min[i]
            self.delta[i] = self.amplitude[i] / self.Nbins[i]

        if self.end == 0: self.bins (start)
        else: self.bins (start, end)
        
    def MinMax(self):
        txt = self.file.readline()
        max = {}
        min = {}
        while txt:
            if txt[0] is'@' or txt[0] is '#':
                pass
            else:
                tmp =  txt.split()
                for i in range (len(tmp)):
                    max[i] = min[i] = float(tmp[i])
                txt = self.file.readline()
                break
            txt = self.file.readline()

        while txt:
            tmp =  txt.split()
            for i in range (len(tmp)):
                val = float (tmp[i])
                if max[i] < val:
                    max[i] = val
                if min[i] > val:
                    min[i] = val
            txt = self.file.readline()
        self.file.close()
        self.file = open(filename, 'r')
        return min, max
        
        
    def bins (self, start, end = 99999999):

        text = self.file.readline ()
        
        while text:
            if text [0] == "#" or text [0] == "@":
                pass
            else:
                if self._count == -1:
                    self._count += 1
                    temp = text.split()
                    self.Ndih = len (temp)
                else:
                    self._count += 1
                    if start <= self._count <= end:
                        temp = text.split()
                        data = []
                        for i in range (self.Ndih):
                            x = int(math.floor((float(temp[i])-self.min[i])/self.delta[i])+1)
                            if x > self.Nbins[i]:
                                x = 1
                            elif x < 1:
                                x = 1
                            data.append(x)
                        tup = tuple (data)
			self._bins [tup] = self._bins.get(tup,0) + 1
                    else:
                        pass
            text = self.file.readline ()
        self.file.close()
        # total number of data points
        self.data_points = self.dataPoints()
    
    def WritetoFile(self):
        outfile = (self.filename).replace(self.filename[self.filename.rfind('.'):], '.corr')
        fout=open(outfile, 'w')
	self.calcprobs()
	self.calctotNbins()
	k = []
	if isenerg:
	    self.calcenergies()
	for i in range(len(self.min)):
	    k.append((self.min[i]+self.delta[i]/2))
	for n in range (1,self.totNbins+1):
	    ind = []
	    for i in range (self.Ndih):
		fout.write('%12.2f'  %k[i])
		x = int(math.floor((k[i]-self.min[i])/self.delta[i])+1)
		if x > self.Nbins[i]:
		    x = 1
		ind.append(x)
		tup = tuple(ind)
	    if not isenerg:
		fout.write('\t%20s\n' %(self.prob.get(tup,0.)))
	    else:
		fout.write('\t%20s\n' %(self.energy.get(tup,self.minener)))

	    if n % self.Nbins[self.Ndih-1] == 0 and n != self.totNbins:
		for m in range(self.Ndih):
		    if n % pow(self.Nbins[self.Ndih-1-m],self.Ndih-m) == 0:
			if n != self.totNbins:
			    k[self.Ndih-m] = self.min[self.Ndih-m] + self.delta[self.Ndih-m]/2
			    k[self.Ndih-1-m] += self.delta[self.Ndih-1-m]
	    else:
		k[self.Ndih-1] += self.delta[self.Ndih-1]
	return outfile

    def recursive_bit_list(self,n):
	if n==1:
	    return [[0],[1]]
	else:
	    return map(lambda x: x+[0], self.recursive_bit_list(n-1)) + \
		   map(lambda x: x+[1], self.recursive_bit_list(n-1))

    def findindexes(self,tup):
	bit_list = self.recursive_bit_list(len(tup))
	listoftuples = []
	for list1 in bit_list:
	    list2 = []
	    for i in range (len(tup)):
		tmp = tup[i] - list1[i]
		if tmp<1: tmp = self.Nbins[i]
		list2.append(tmp)
	    tup2 = tuple(list2)
	    listoftuples.append(tup2)
	return listoftuples

    def probavg(self,listoftuples):
	prob = 0
	for tups in listoftuples:
	    prob += self.prob.get(tups,0)
	return prob/len(listoftuples)

    def energyavg(self,listoftuples):
	energy = 0
	for tups in listoftuples:
	    energy += self.energy.get(tups,self.minener)
	return energy/len(listoftuples)

    def WriteAvg(self):

        outfile = (self.filename).replace(self.filename[self.filename.rfind('.'):], '.corr')
        fout=open(outfile, 'w')
	k = self.min.copy()
	self.calctotNbins()
	self.calcprobs()
	if isenerg:
	    self.calcenergies()
	for n in range(1,self.totNbins+1+self.Nbins[0]):
	    ind = []
	    for i in range(self.Ndih):
		fout.write('%12.2f' %k[i])
		x = int(math.floor((k[i]-self.min[i])/self.delta[i]+1))
		if x > self.Nbins[i]: x = 1
		ind.append(x)
		tup = tuple(ind)
	    # calculate average probability of 2^n points, e.g in n=2
	    # case (x-1,y-1), (x-1,y), (x,y-1) and (x,y)
	    # be careful if x<0 then x=grids, namely the last element
	    listoftuples = self.findindexes(tup)
	    if not isenerg:
		fout.write('\t%20s\n' % self.probavg(listoftuples))
	    else:
		fout.write('\t%20s\n' % self.energyavg(listoftuples))

	    tobemirrored = 1
	    for i in range(1,len(tup)):
		if not tup[i] == 1: tobemirrored = 0

	    if not isenerg:
		if tobemirrored: val = self.probavg(listoftuples)
	    else:
		if tobemirrored: val = self.energyavg(listoftuples)

	    if n % self.Nbins[self.Ndih-1] == 0:
		fout.write('%12.2f' %k[0])
		for m in range(self.Ndih):
		    if m != 0:
			fout.write('%12.2f' %self.max[m])
		    if n % pow(self.Nbins[self.Ndih-1-m],self.Ndih-m) == 0:
			if n != self.totNbins:
			    k[self.Ndih-m] = self.min[self.Ndih-m]
			    k[self.Ndih-1-m] += self.delta[self.Ndih-1-m]
			    fout.write('\t%20s\n' %val)
			elif n == self.totNbins:
			    if m == self.Ndih - 1:
				fout.write('\t%20s\n' %val)
			    k[0] = self.max[0]
			    for i in range(1,self.Ndih):
				k[i] = self.min[i]
	    else:
		k[self.Ndih-1] += self.delta[self.Ndih-1]
	return outfile

    def dataPoints (self):
        if self.end == 0:
            return self._count - self.start
        else:
            return self.end - self.start

    def shannon (self):
        self.ent = 0
        for prob in self._bins.values():
            self.ent -= float(prob)/self.data_points * math.log(float(prob)/self.data_points)
        return self.ent

    def get_shannon(self):
        return self.ent

    def total_points (self):
        return (self._count)

    def shannonPer (self):
        x = 1
        for i in self.Nbins:
           x *= i
        c = 1./len(self.Nbins)
        return self.ent/(self.Ndih * math.log(math.pow(x,c)))

    def calctotNbins (self):
        x = 1
        for i in self.Nbins:
            x *= i
	self.totNbins = x
	return x

    def fbins (self):
        return len (self._bins.values())

    def calcprobs (self):
	self.prob = {}
	for key in self._bins.keys():
	    self.prob[key] = float(self._bins[key]) / self.data_points

    def calcenergies(self):
	try:
	    self.prob
	except NameError:
	    self.calcprobs()
	self.energy = {}
	#kB = 1.3806503*10**(-23)
	NkB = 1.3806503*6.02*10**(-3) # kJ K^-1 mol^-1
	T = 298 # K
	self.calctotNbins()
	self.Pmax = max(self.prob.values())
	self.Pmin = min(self.prob.values())
	# Scale the lowest energy value st the max and min is discernible
	# and avoid log(0.0) where prob is 0.0
	self.minener = -NkB*T*(math.log((0.0 + self.Pmin)/20 / self.Pmax))
	#self.minener = -NkB*T*(math.log((0.0 + self.Pmin)/50))
	for key in self._bins.keys():
	    self.energy[key] = -NkB*T*(math.log(self.prob[key] / self.Pmax))
        
def arg (arg):
    start = end = choice = division = israma = isenerg = 0
    grids = []; interval=[]
    intervalstring = ""
    for i in range (len(arg)):
        if arg[i].startswith ('--'):
            opt = arg[i][2]
            if opt == 's':
                start = int (arg[i+1])
            elif opt == 'e':
                end = int (arg[i+1])
            elif opt == 'f':
                filename = arg[i+1]
            elif opt == 'g':
                dump = arg[i+1].split('x')
                for i in dump: grids.append(int(i))
            elif opt == 'x':
                division = int(arg[i+1])
            elif opt == 'i':
		interval = [float(c) for x in arg[i+1].split(',') for c in x.split(':')]
		if len(interval) % 2:
		    print "Error! Interval size should be even!"
		    sys.exit(1)
		intervalstring = arg[i+1]
	    else:
                print "\nWrong option: %s\nQuitting...\n" %sys.argv[i]
		help()
                sys.exit(1)

	elif arg[i] == intervalstring:
	    pass
        elif arg[i].startswith('-'):
            opt = arg[i][1:]
            if opt == 'g':
                choice = 3
	    elif opt == 'gn':
		choice = 4
            elif opt == 'all':
                choice = 2
            elif opt == 'rama':
                israma = 1
	    elif opt == 'en':
		isenerg = 1
            elif opt is 'h':
                help()
                sys.exit()
            else:
                print "\nWrong option: %s\nQuitting...\n" %sys.argv[i]
		help()
                sys.exit(1)
    if israma:
	interval = [-180, 180]
    return filename, grids, start, end, choice, division, interval, isenerg
    
def help():
    print '\nShannon Entropy Calculation ang Joint Probability Data Gridding\n'
    print 'Usage: ${###} --f <filename> --g <NxN> (<options>)\n'
    print '''Examples:   ${###} --f file.xvg --g 12x12
            ${###} --f file.xvg --g 12 -g
            ${###} --f file.xvg --g 12x12 -rama
	    ${###} --f file.xvg --g 12x12 --i -180:180
	    ${###} --f file.xvg --g 12x12 --i 100:180,-180:180 -g
            ${###} --f file.xvg --g 6x6 --x 4
	    ${###} --f file.xvg --g 12 --i 0:180,-180:180 -g -en
            ${###} --f file.xvg --g 12 --start 15000 --end 25000\n'''
    print ""
            #${###} --f file.xvg --g 3x3x3 -m (or -mn or -gn or -ma)
    
def Count(filename):
    file = open(filename, 'r')
    count = 0
    while True:
        txt = file.readline()
        if not txt: break
        elif txt[0] != '@' and txt[0] != '#': count += 1
    file.close()
    return count
    
def Display(rama):
    ent = rama.shannon()
    total_points = rama.total_points ()
    percentage = rama.shannonPer ()
    totNbins = rama.calctotNbins()
    bins = rama.fbins ()
    total_bins = rama.calctotNbins()
    processed = rama.data_points
    print "\nShannon Entropy:", ent, "\t\tS.E./Max.Entropy:", percentage
    print  "Bins:", bins, '/', total_bins, "\t\tProcessed data points:", processed, "/", total_points, "\n"
    
def StdDev(entList, avg, N):
    total = 0
    for x in entList:
        total += (x-avg)**2
    return math.sqrt(total/N)
                
def StdErr(stddev, N):
    return stddev / math.sqrt(N-1)
            
if __name__ == '__main__':
    import sys
    import math
    sys.stdout.softspace = False
    if len (sys.argv) < 2 or len (sys.argv) > 11:
        print "Usage : --f <filename> --g <NxN...> (--s <start> --e <end> <option>)"
        print sys.argv
    else:
        filename, grids, start, end, choice, division, interval, isenerg = arg (sys.argv)
	if not grids: grids.append(12)
        if division:
            count = Count(filename)
            increment = count / division
            start = 0 ; end = increment
            entList = []
            print
            for i in range (division):
                print "From %d to %d" %(start, end)
                rama = Rama(filename, grids, start, end, interval, isenerg)
                start += increment
                end += increment
                Display(rama)
                entList.append(rama.get_shannon())
            start = end = 0
            ramaAll = Rama(filename, grids, start, end)
            print "All data points:"
            Display(ramaAll)
            avg = ramaAll.get_shannon()
            stddev = StdDev(entList, avg, division)
            stderr = StdErr(stddev, division)
            print '\n*************************** RESULT *************************************\n'
            print  'Shannon Entropy: %f%s%f\tError Percentage: %f\nstd. deviation: %f\tstd. Error: %f\n' %(avg, u"\u00B1", stderr, (stderr*100)/avg, stddev, stderr)
        else:
            rama = Rama (filename, grids, start, end, interval, isenerg)
            if choice == 0 or choice == 2:
                Display(rama)
            elif choice == 3:
                foutname = rama.WriteAvg()
		print "File %s created successfully!" %foutname
	    elif choice == 4:
		foutname = rama.WritetoFile()
		print "File %s created successfully!" %foutname
