#! /bin/bash

#plotlist=('dist_CNi-CNi4_avg.xvg' 'dih_CN-CA-CN-CA_avg.xvg' 'dih_CA-CN-CA-CN_avg.xvg' 'table_L_wall0.xvg' 'tablep.xvg')
#plotlist=('dist_CNi-CNi4_avg.xvg' 'dih_CN-CA-CN-CA_avg.xvg' 'dih_CA-CN-CA-CN_avg.xvg' 'ang_CA-CN-CA_avg.xvg' 'ang_CN-CA-CN_avg.xvg')
#plotlist=('dist_CNi-CNi4_avg.xvg' 'dih_CN-CA-CN-CA_avg.xvg' 'dih_CA-CN-CA-CN_avg.xvg' 'dih_A-CN-A-CN_avg.xvg' 'dih_A-CN-CA-CN_avg.xvg' 'dih_CA-CN-A-CN_avg.xvg' 'dih_CN-A-CN-A_avg.xvg' 'dih_CN-A-CN-CA_avg.xvg' 'dih_CN-CA-CN-A_avg.xvg')
plotlist=('dist_CNi-CNi3_avg.xvg' 'dih_CN-CA-CN-CA_avg.xvg' 'dih_CA-CN-CA-CN_avg.xvg' 'dih_CA-CA-CA-CA_avg.xvg' 'tablep.xvg' 'table_d6.xvg' 'table_a10.xvg' 'table_GO_GO.xvg' 'table_L_L.xvg' 'dih_CN-CA-CN-CA_avg_mid.xvg' 'dih_CA-CN-CA-CN_avg_mid.xvg' 'dist_CNi-CNi3_avg-mid.xvg')

plcomms=''
q="'"
gplot='gplot'
#using=" using 1:2 "
with=" with lines "
histdir="histograms"
terminal="set terminal wxt enhanced"
fonttype="Gill Sans"
fontsize="12"
linewidth=1.5
size="800,600"
output=""
termset=""
usersetlabels=false
keyvh="vertical"
keysamplen="4"
keyspacing="1"
keywidth="0"
keyheight="0"
keypos="right Right"
check_identical=true

###################################################################
# Atomistic EALA directories
###################################################################
dirvac="/mnt/data2/cdalgicdir/SIMS/EALA-cg/atm-implicit/071014_implicit-excluded/cg-only-CA-glu-PME/map"
dirint="/mnt/data2/cdalgicdir/SIMS/EALA-cg/atm-interface/map-only-CA-glu"
folders=($dirvac $dirint)
###################################################################


plot () {
        gplot $output -c "$xtics" -c "$yrange" -c "$xrange" -t "$title" -c "$key" -c "set ylabel '$ylabel'" -c "set xlabel '$xlabel'" -c "$terminal" -- "$plcomms"
}

printcommands () {
    if [[ $noplottab == true ]]; then
        #echo "plot $plotfiles" | sed 's/,/,\\\n /g'
        echo -e "plot\\\\\n $plcomms" | sed 's/,/,\\\n /g'
	echo
    else
        echo "plot $plcomms"
	echo
    fi
}

# parse through command and obtain options and name of directories to plot

if [[ $# -eq 0 ]];then
    echo "Error! Specify a directory name!"
    echo "Usage: $ plotall dirname"
    exit 1
fi

while [[ $# -gt 0 ]]; do
    case $1 in

        -png)
	    termset="png"
	    fontsize=22
            shift;;

        -pdf)
	    termset="pdf"
	    fontsize=18
	    linewidth=2.5
            shift;;

	-t | -titles)
	    usersetlabels=true
	    IFS=$';'
	    for i in ${2}; do labellist+=( "$i" );done
	    IFS=$' \t\n'
	    k=0
	    shift 2
	    ;;

        -n | -nop | -noplot)
            noplot=true
            noplottab=false
            shift 1;;

        -lw | -linewidth)
	    linewidth=$2
	    shift 2
	    ;;

        -ft | -fonttype)
	    fonttype="$2"
	    shift 2
	    ;;

        -fs | -fontsize)
	    fontsize=$2
	    shift 2
	    ;;

        -s | -size)
	    size=$2
	    shift 2
	    ;;

        -nt | -nopt)
            noplot=true
            noplottab=true
            shift
	    ;;

        -w | -wall)
	    plotlist+=('table_L_wall0.xvg' 'table_GO_wall0.xvg' 'coord_L.xvg')
	    shift
	    ;;

        -kho | -keyhorizontal)
	    keyvh="horizontal"
	    shift
	    ;;

        -ks | -keysamplen)
	    keysamplen=$2
	    shift 2
	    ;;

        -kp | -keypos)
	    keypos=$2
	    shift 2
	    ;;

        -ksp | -keyspacing)
	    keyspacing=$2
	    shift 2
	    ;;

        -kw | -keywidth)
	    keywidth=$2
	    shift 2
	    ;;

        -kh | -keyheight)
	    keyheight=$2
	    shift 2
	    ;;

        -i | -id | -identical)
	    check_identical=true
	    shift
	    ;;

        -ni | -noid | -noidentical)
	    check_identical=false
	    shift
	    ;;

        -h|--h|-help|--help)
            echo "Usage: plotall [directories]"
	    exit 0
            ;;

        *)
            folders=(${folders[*]} $1)
            shift
            ;;
    esac
done

if [[ $termset == "png" ]]; then
    terminal='set terminal pngcairo size '$size' enhanced font "'${fonttype[@]}','$fontsize'" linewidth '$linewidth' rounded'
elif [[ $termset == "pdf" ]]; then
    terminal='set terminal pdfcairo enhanced font "'${fonttype[@]}','$fontsize'" linewidth '$linewidth' rounded'
fi


IFS=$'\t\n'
len_plots=`expr ${#plots[@]} - 1`
i=0

for f in ${plotlist[@]}; do

    if [[ $f == table*xvg ]]; then
	histdir="."
	xlabel='r (nm)'
	ylabel='V(r) (kJ/mol)'
	xrange='set xrange [:1.4]'
	yrange='set yrange [:20]'
	using=" using 1:6 "
	xtics='set xtics auto'
	keypos='right'
	if [[ $f == table_[adi][0-9]*.xvg ]]; then
	    if [[ $f == table_[a][0-9]*.xvg ]]; then
		xlabel='{/Symbol q} ({/Symbol \260})'
		ylabel='V({/Symbol q}) (kJ/mol)'
		xrange='set xrange [0:180]'
		xtics='set xtics 30'
	    else
		xrange='set xrange [-180:180]'
		xlabel='{/Symbol f} ({/Symbol \260})'
		ylabel='V({/Symbol f}) (kJ/mol)'
		xtics='set xtics 45'
	    fi
	    using=" using 1:2 "
	    yrange='set yrange [:]'
	elif [[ $f == "table_GO_GO.xvg" ]]; then
	    using=" using 1:6 "
	    xrange='set xrange [:5]'
	    yrange='set yrange [:200]'
	elif [[ $f == "tablep.xvg" ]]; then
	    using=" using 1:6 "
	    xrange='set xrange [:1.5]'
	    yrange='set yrange [:50]'
	else
	    using=" using 1:6 "
	    xrange='set xrange [:5]'
	    yrange='set yrange [:20]'
	fi
    elif [[ $f == dih_* ]]; then
	using=" using 1:2 "
	histdir="histograms"
	xlabel='{/Symbol f} ({/Symbol \260})'
	ylabel='P({/Symbol f})'
	xrange='set xrange [-180:180]'
	yrange='set yrange [:]'
	xtics='set xtics 45'
	keypos='left Left reverse'
    elif [[ $f == ang_* ]]; then
	using=" using 1:2 "
	histdir="histograms"
	xlabel='{/Symbol t} ({/Symbol \260})'
	ylabel='P({/Symbol t})'
	xrange='set xrange [-180:180]'
	yrange='set yrange [:]'
	xtics='set xtics 45'
	keypos='left'
    elif [[ $f == coord*xvg ]]; then
	using=' using ($1/1000):4 every 100 '
	histdir="."
	xlabel='Time (ns)'
	ylabel='P({/Symbol f})'
	xrange=''
	yrange=''
	xtics=''
	keypos='out'
	keyvh='horizontal'
	keysamplen='1'
	keywidth='-1'
    elif [[ $f == time*xvg ]]; then
	using=' using ($1/1000):2 every 500 '
	histdir="."
	xlabel='Time (ns)'
	ylabel='z (nm)'
	xrange=''
	yrange=''
	xtics=''
	keypos='right'
    else 
	using=" using 1:2 "
	histdir="histograms"
	xlabel='r (nm)'
	ylabel='P(r)'
	xrange='set xrange [:]'
	yrange='set yrange [:]'
	xtics='set xtics auto'
	keypos='right'
    fi
    plcomms=''
    tmp=`echo "${f}" | sed 's/_/-/g'` && title=${tmp%.xvg}
    [[ $termset != "" ]] && output="-o${title}.${termset}"
    title=${title#dih-} && title=${title%-avg}

    if [[ $title == "CN-A-CN-CA" ]] || [[ $title == "CN-A-CN-A" ]] || [[ $title == "CN-CA-CN-CA" ]]; then
	keypos='right top'
    fi

    key="set key $keypos $keyvh samplen $keysamplen width $keywidth spacing $keyspacing height $keyheight"

    counter=0

    if $check_identical; then
    identical=true
    nfolders=${#folders[@]}
    for i1 in `seq $((nfolders-1))`; do
	dir1=${folders[$i1]}
	f1=$dir1/$histdir/$f
	for i2 in `seq $((i1+1)) $((nfolders-1))`; do
	    dir2=${folders[$i2]}
	    if [[ $dir1 == $dirvac ]] || [[ $dir1 == $dirint ]] || [[ $dir2 == $dirvac ]] || [[ $dir2 == $dirint ]]; then
		identical=true
	    else
		f2=$dir2/$histdir/$f
		#echo $f1 $f2 $identical
		if [[ -e $f1 ]] && [[ -e $f2 ]]; then
		    [[ `diff $f1 $f2` ]] && identical=false && break
		fi
	    fi
	done
    done
    #echo $identical
    else
	identical=false
    fi

    if ! $identical; then
    for dir in ${folders[@]}; do
	address=$dir/$histdir/$f
	#[[ ! -e "${address}" ]] && continue
	if [[ $dir == cg-ala-CACB* ]] || [[ $dir == map-ala-CACB* ]]; then
	    dir="ala-CACB"
	elif [[ $dir == cg-ala-CA* ]] || [[ $dir == map-ala-CA* ]]; then
	    dir="ala-CA"
	elif [[ $dir == cg-only-CA* ]] || [[ $dir == map-only-CA* ]]; then
	    dir="only-CA"
	elif [[ $dir == cg-ala-CB* ]] || [[ $dir == map-ala-CB* ]]; then
	    dir="ala-CB"
	elif [[ $dir == cg-CAB* ]] || [[ $dir == map-CAB* ]]; then
	    dir="CAB"
	fi
	if [[ $dir == $dirvac ]]; then
	    dirlabel="atm-vac"
	elif [[ $dir == $dirint ]]; then
	    dirlabel="atm-int"
	else
	    if $usersetlabels; then
		dirlabel="${labellist[$((counter-2))]}"
	    else
		dirlabel=`echo "$dir" | sed 's/_/-/g'`
	    fi
	fi
	plcomms=${plcomms}${q}${address}${q}${using}${with}'t '${q}${dirlabel}${q},
    let counter=$counter+1
    done
    fi
    if [[ $noplot == true ]]; then
	printcommands
    else
	[[ "${plcomms}" == "" ]] && continue
	plot $@
    fi
done
