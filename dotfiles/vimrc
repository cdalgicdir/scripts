let mysyntaxfile = "~/.vim/syntax/mysyntax.vim"
:syntax on
"augroup syntax
":autocmd FileType *      set formatoptions=tcql nocindent comments&
":autocmd FileType c,cpp  set formatoptions=croql cindent comments=sr:/*,mb:*,ex:*/,://
":autocmd FileType mdp.gromacs set omnifunc=mdpcomplete#Complete
"" imap <C-n> <C-x><C-o>
":autocmd FileType python set omnifunc=pythoncomplete#Complete
":autocmd BufWritePre *.gro call Update_number_of_atoms()
":au BufNewFile,BufRead *.rtp    setf top.gromacs
":au BufNewFile,BufRead *.gp  set filetype=gnuplot
":au BufNewFile,BufRead *.comms  set filetype=sh
":au BufNewFile,BufRead .vmdrc  set filetype=tcl
":au BufNewFile,BufRead bash-fc-*    set syntax=sh
":au BufNewFile,BufReadPost *.lmp           setfiletype lammps
":au BufNewFile,BufReadPost *.lammps           setfiletype lammps
":au BufNewFile,BufReadPost system.in.init           setfiletype lammps
":au BufNewFile,BufReadPost system.in.settings           setfiletype lammps
":au BufNewFile,BufReadPost run.in.*           setfiletype lammps
":au BufNewFile,BufReadPost in.*           setfiletype lammps
"augroup end

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
  " autocmd FileType tex,latex    call pencil#init()
augroup END

highlight Search cterm=NONE ctermfg=black ctermbg=yellow
":highlight SpellBad gui=underline guibg=NONE guifg=NONE
":au BufRead *.tex set spell

:map <F6> {v}!par -w80<CR>
:vmap <F6> !par -w70<CR>
":map <F4> :highlight Normal ctermfg=black ctermbg=white<CR>
:map <F4> :set background=light<CR>:colorscheme earendel<CR>

":set autoindent
set autowrite
set ruler
:ab #i #include
:ab #b /********************************************************
:ab #c ###################################################################
:ab #d %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:ab #e ********************************************************/
:ab #l /*------------------------------------------------------*/
:set sw=4
set notextmode
set notextauto
set hlsearch
set incsearch
set history=1000
set undolevels=1000
":set textwidth=100
set ignorecase          " ignore case when searching
set smartcase           " no ignorecase if Uppercase char present

map <F8> :w <enter> :!/home/cdalgicdir/soft/bin/vimrun % <enter>
map <F2> :w <enter> :!/home/cdalgicdir/soft/bin/latexcrop % <enter>
"nnoremap    <F2> :<C-U>setlocal lcs=tab:>-,trail:-,eol:$ list! list? <CR>

" LATEX PLUGIN options 

" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
"filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp
" " Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]
" Visually select the text that was last edited/pasted
map gV `[v`]
nore ; :
nore , ;
" nnoremap <Up> gk
"let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 -src-specials -interaction=nonstopmode $*'
"let g:Tex_ViewRule_pdf = 'okular --unique'
"function! SyncTexForward()
"    let s:syncfile = fnamemodify(fnameescape(Tex_GetMainFileName()), ":r").".pdf"
"    let execstr = "silent !okular --unique ".s:syncfile."\\#src:".line(".").expand("%\:p").' &'
"    exec execstr
"endfunction
"nnoremap <Leader>f :call SyncTexForward()<CR>
"
:set nocompatible
:filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
"Plugin 'tpope/vim-commentary'
Plugin 'tomtom/tcomment_vim'
Plugin 'matchit.zip'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'beloglazov/vim-online-thesaurus'
Plugin 'HubLot/vim-gromacs'
" colorschemes
Plugin 'flazz/vim-colorschemes'
Plugin 'depuracao/vim-darkdevel'
Plugin 'altercation/solarized'
Plugin 'github-theme'
" Markdown syntax highlighting
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'bling/vim-airline'
Plugin 'benmills/vimux'
Plugin 'kien/ctrlp.vim'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'vim-scripts/earendel'
Plugin 'mayansmoke'
Plugin 'junegunn/goyo.vim'
Plugin 'mtth/scratch.vim'
" Plugin 'aquach/vim-mediawiki-editor'
" Plugin 'chikamichi/mediawiki.vim'
Plugin 'junegunn/limelight.vim'
Plugin 'reedes/vim-pencil'
Plugin 'reedes/vim-thematic'
Plugin 'reedes/vim-colors-pencil'
Plugin 'nickburlett/vim-colors-stylus'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'vimoutliner/vimoutliner'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-voom/VOoM'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'junegunn/fzf.vim'
Plugin 'mileszs/ack.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'w0rp/ale'
Plugin 'tpope/vim-sleuth'
Plugin 'xolox/vim-notes'
Plugin 'xolox/vim-misc'
"Plugin 'kynan/dokuvimki'
"Plugin 'Txtfmt-The-Vim-Highlighter'
"Plugin 'reedes/vim-textobj-sentence'
" Git plugin not hosted on GitHub
"Plugin 'https://github.com/Lokaltog/vim-easymotion.git'
"Plugin 'https://github.com/vim-scripts/Rainbow-Parenthsis-Bundle.git'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'
Plugin 'davidhalter/jedi-vim'
Plugin 'vim-scripts/indentpython.vim'
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'ambv/black'
Plugin 'aperezdc/vim-template'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
let g:notes_directories = ['~/Dropbox/Notes']
let g:notes_suffix = '.md'


autocmd FileType top.gromacs set commentstring=;\ %s
autocmd FileType mdp.gromacs set commentstring=;\ %s

" Toggle fold state between closed and opened. 
  " 
  " If there is no fold at current line, just moves forward. 
  " If it is present, reverse it's state. 
  fun! ToggleFold() 
  if foldlevel('.') == 0 
  normal! l 
  else 
  if foldclosed('.') < 0 
  . foldclose 
  else 
  . foldopen 
  endif 
  endif 
  " Clear status line 
  echo 
  endfun 
  " Map this function to Space key. 
  noremap <space> :call ToggleFold()<CR>

" Rainbowparentheses always on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" matchit
":source ~/.vim/bundle/vim-matchit/plugin/matchit.vim

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg|xtc|edr|cpt|tpr|pdf)$',
  \}
" https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/
" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>
" /CtrlP

set wildignore=*.log,*.aux,*.dvi,*.aut,*.aux,*.bbl,*.blg,*.dvi,*.fff,*.log,*.out,*.pdf,*.ps,*.toc,*.ttt
set thesaurus+=~/.vim/thesaurus/mthesaur.txt
set dictionary+=/usr/share/dict/words

" Buffergator
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 0

" Looper buffers
"let g:buffergator_mru_cycle_loop = 1

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" Shared bindings from Solution #1 from earlier
nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>

" /Buffergator

":command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g
"
"func! WordProcessorMode() 
"  setlocal formatoptions=1 
"  setlocal noexpandtab 
"  map j gj 
"  map k gk
"  setlocal spell spelllang=en_us 
"  set complete+=s
"  set formatprg=par
"  setlocal wrap 
"  setlocal linebreak 
"endfu 
"com! WP call WordProcessorMode()
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_MultipleCompileFormats = 'pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $*'
let g:Tex_GotoError = 0
let g:Tex_ViewRule_pdf = 'zathura'
" Initial fold level for markdown syntax plugin
let g:vim_markdown_initial_foldlevel=4
" Highlight YAML frontmatter
let g:vim_markdown_frontmatter=1
let g:vim_markdown_math=1
" let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" Highlight line with \l, 'l to return to line and :match to clear
nnoremap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>

" vim-airline settings
"let g:airline_left_sep=''
"let g:airline_right_sep=''
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Hide function display (don't use it)
let g:airline#extensions#tagbar#enabled = 0

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts=1

if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline_theme='dark'

" Vimux settings
let g:VimuxHeight = "30"
let g:VimuxOrientation = "v"
let g:VimuxUseNearestPane = 0

" Vimux Mappings
nmap <leader>vp :VimuxPromptCommand<cr>
nmap <leader>vl :VimuxRunLastCommand<cr>
nmap <leader>vq :VimuxCloseRunner<cr>
nmap <leader>vx :VimuxInterruptRunner<cr>

" Wikimedia
"let g:mediawiki_editor_url = "localhost/mediawiki"
"let g:mediawiki_editor_path = ""
"let g:mediawiki_editor_username = "cdalgicdir"
"let g:mediawiki_editor_password

" Limelight
" Color name (:help cterm-colors) or ANSI code
"let g:limelight_conceal_ctermfg = 'gray'
"let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_ctermfg = (&bg == 'dark') ? 'red' : 'gray'
"let g:limelight_conceal_ctermfg = 245  " Solarized Base1
"let g:limelight_conceal_guifg = '#8a8a8a'  " Solarized Base1

" Color name (:help gui-colors) or RGB color
"let g:limelight_conceal_guifg = 'DarkGray'
"let g:limelight_conceal_guifg = '#777777'
let g:limelight_conceal_guifg = (&bg == 'dark') ? 'red' : 'gray'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 0

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

let g:pencil#autoformat = 0
noremap <buffer> <silent> <F7> :<C-u>PFormatToggle<cr>
inoremap <buffer> <silent> <F7> <C-o>:PFormatToggle<cr>
let g:pencil#textwidth = 74
let g:pencil#cursorwrap = 1     " 0=disable, 1=enable (def)
set statusline=%<%f\ %h%m%r%w\ \ %{PencilMode()}\ %=\ col\ %c%V\ \ line\ %l\,%L\ %P
set rulerformat=%-12.(%l,%c%V%)%{PencilMode()}\ %P
let g:airline_section_x = '%{PencilMode()}'

let g:pencil#mode_indicators = {'hard': '␍', 'auto': 'ª', 'soft': '⤸', 'off': '',}



" Highlight words to avoid in tech writing
" =======================================
"
"   obviously, basically, simply, of course, clearly,
"   just, everyone knows, However, So, easy

"   http://css-tricks.com/words-avoid-educational-writing/

highlight TechWordsToAvoid ctermbg=red ctermfg=white
match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy/
autocmd BufWinEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertLeave * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd BufWinLeave * call clearmatches()

map <C-n> :NERDTreeToggle<CR>
let g:pencil_higher_contrast_ui = 0   " 0=low (def), 1=high
let g:pencil_neutral_headings = 1   " 0=blue (def), 1=normal
let g:pencil_neutral_code_bg = 1   " 0=gray (def), 1=normal
let g:pencil_spell_undercurl = 1       " 0=underline, 1=undercurl (def)
let g:pencil_terminal_italics = 1
"let g:airline_theme = 'pencil'

let g:thematic#themes = {
\ 'bubblegum'  : {
\                },
\ 'jellybeans' : { 'laststatus': 0,
\                  'ruler': 1,
\                },
\ 'pencil_dark' :{'colorscheme': 'pencil',
\                 'background': 'dark',
\                 'airline-theme': 'pencil',
\                 'ruler': 1,
\                },
\ 'pencil_lite' :{'colorscheme': 'pencil',
\                 'background': 'light',
\                 'airline-theme': 'pencil',
\                 'ruler': 1,
\                },
\ 'write'   : { 'colorscheme': 'pencil',
\                  'background': 'light',
\                  'columns': 75,
\                  'font-size': 17,
\                  'fullscreen': 1,
\                  'laststatus': 0,
\                  'linespace': 8,
\                  'typeface': 'Courier Prime',
\                },
\ }

function! s:goyo_enter()
  if has('gui_running')
    set fullscreen
    colorscheme pencil
    " set guifont=Courier\ Prime\ 17
    set guifont=Source\ Code\ Pro\ Medium\ 18
    set background=light
    set linespace=7
  elseif exists('$TMUX')
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif
  set noshowmode
  set noshowcmd
  set scrolloff=999
  set antialias
  set guicursor+=a:blinkon0    " disable cursor blink
  set guioptions-=r   "kill right scrollbar
  set guioptions-=l   "kill left scrollbar
  set guioptions-=L   "kill left scrollbar multiple buffers
  set guioptions-=T   "kill toolbar
  highlight SpellBad gui=underline guibg=NONE guifg=red
  syn match TmlDoubleWords /\c\<\(\S\+\)\_s\+\1\ze\_s/
  highlight TmlDoubleWords gui=underline guibg=NONE guifg=red
  syn spell toplevel
  Limelight
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  " ...
endfunction

function! s:goyo_leave()
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  elseif exists('$TMUX')
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  endif
  set showmode
  set showcmd
  set scrolloff=5
  set guioptions+=r   "kill right scrollbar
  Limelight!
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
  " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

let g:goyo_height=50
let g:goyo_width=75

"noremap <silent> <F5> :<C-u>ThematicNarrow<cr>
"noremap <silent> <F6> :<C-u>ThematicWiden<cr>
"inoremap <silent> <F5> <C-o>:ThematicNarrow<cr>
"inoremap <silent> <F6> <C-o>:ThematicWiden<cr>

function! WC()
    echo "\n"
    let filename = expand("%")
    let cmd = "~/.vim/texcount_3/texcount.pl " . filename . ""
    let result = system(cmd)
    echo result . ""
endfunction

command WC call WC()

let NERDSpaceDelims=1
" Ignore unreadable or useless files when autocomplete filenames
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*~,*.pyc

" pencil colorscheme
let g:pencil_neutral_code_bg = 1   " 0=gray (def), 1=normal
let g:pencil_neutral_headings = 1   " 0=blue (def), 1=normal
let g:pencil_higher_contrast_ui = 0   " 0=low (def), 1=high
let g:pencil_gutter_color = 1      " 0=mono (def), 1=color
let g:pencil_spell_undercurl = 1       " 0=underline, 1=undercurl (def)
let g:pencil_terminal_italics = 1

" let g:tcomment_types = {
"             \ 'plaintex': {'commentstring': '%% %s'}
"             \ }
" call tcomment#DefineType('plaintex',         '%% %s'            )
" This allows including the proper PLUMED syntax file:
" :let &runtimepath.=','.$PLUMED_VIMPATH
" This makes autocompletion work in the expected way:
:set completeopt=longest,menuone
" This enables bindings of F2/F3/F4 to plumed specific commands:
:let plumed_shortcuts=1
autocmd FileType plumed setlocal commentstring=#\ %s

" fzf
set rtp+=~/.fzf
nmap <Leader>; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
" fzf ends

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:flake8_show_in_gutter=1  " show

" " ale plugin: linter
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)
:set number relativenumber
:nnoremap <silent> <C-l> :set relativenumber! number!<cr>

" buffer switching
nnoremap <F3> :buffers<CR>:buffer<Space>
function! BufSel(pattern)
  let bufcount = bufnr("$")
  let currbufnr = 1
  let nummatches = 0
  let firstmatchingbufnr = 0
  while currbufnr <= bufcount
    if(bufexists(currbufnr))
      let currbufname = bufname(currbufnr)
      if(match(currbufname, a:pattern) > -1)
        echo currbufnr . ": ". bufname(currbufnr)
        let nummatches += 1
        let firstmatchingbufnr = currbufnr
      endif
    endif
    let currbufnr = currbufnr + 1
  endwhile
  if(nummatches == 1)
    execute ":buffer ". firstmatchingbufnr
  elseif(nummatches > 1)
    let desiredbufnr = input("Enter buffer number: ")
    if(strlen(desiredbufnr) != 0)
      execute ":buffer ". desiredbufnr
    endif
  else
    echo "No matching buffers"
  endif
endfunction

"Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")

"" YouCompleteMe
" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" let g:loaded_youcompleteme = 1
autocmd FileType c++ Bundle 'Valloric/YouCompleteMe'
autocmd FileType c Bundle 'Valloric/YouCompleteMe'
autocmd FileType python Bundle 'Valloric/YouCompleteMe'
autocmd FileType shell Bundle 'Valloric/YouCompleteMe'
autocmd FileType php Bundle 'Valloric/YouCompleteMe'
autocmd FileType lammps Bundle 'Valloric/YouCompleteMe'
autocmd FileType top.gromacs Bundle 'Valloric/YouCompleteMe'
colorscheme gruvbox
set background=dark
