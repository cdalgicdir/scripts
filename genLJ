#! /usr/bin/python

import numpy as np
import sys
from datetime import datetime

np.seterr(divide='ignore',invalid='ignore')
MAX = 1e6
R_CUTOFF = 1.4
CHOICELIST = ["126","124","1210","96","cos96","cos126","rep"]
style_list = ["-gro", "-lmp"]
style = style_list[0]

def help():
    print "Usage: genLJ epsilon sigma table.xvg [choice] [CUTOFF] [-lmp/-gro]"
    print "Choices are: ", ', '.join(CHOICELIST), "! 126 is default."
    print "Default cutoff is 1.4"
    print "Default style is -gro (GROMACS). -lmp corresponds to LAMMPS style."
    print "WARNING: Check the cosine including functions, GROMACS complains about the exact derivatives using sinusoidal functions. One can also use numpy.gradient!"
    sys.exit(0)

def LJcos96(r, eps, sigma):
    rmin = (3./2.)**(1./3)*sigma
    U, F = LJ96(r[r<=rmin],eps,sigma)
    D = -eps*(np.cos(np.pi/2/(R_CUTOFF-rmin)*(r[r>rmin]-rmin)))**2
    D_F = eps*(np.sin(np.pi/(R_CUTOFF-rmin)*(r[r>rmin]-rmin)))
    U = np.concatenate((U,D))
    F = np.concatenate((F,D_F))
    #F = np.gradient(U) # not exact
    return U, F

def LJcos126(r, eps, sigma):
    rmin = 2.**(1/6.)*sigma
    U, F = LJ126(r[r<=rmin],eps,sigma)
    D = -eps*(np.cos(np.pi/2/(R_CUTOFF-rmin)*(r[r>rmin]-rmin)))**2
    D_F = eps*(np.sin(np.pi/(R_CUTOFF-rmin)*(r[r>rmin]-rmin)))
    U = np.concatenate((U,D))
    F = np.concatenate((F,D_F))
    #F = np.gradient(U) # not exact
    return U, F

def LJ124(r, eps, sigma):
    U = np.sqrt(27.)/2.*eps*((sigma/r)**12-(sigma/r)**4)
    F = np.sqrt(27.)/2.*eps*((12.*sigma**12/r**13)-(4.*sigma**4/r**5))
    return U, F

def LJ1210(r, eps, sigma):
    # bereau2009
    U = eps*(5*(sigma/r)**12 - 6*(sigma/r)**10)
    F = eps*(5*(12.*sigma**12/r**13) - 6*(10.*sigma**10/r**11))
    return U, F

def LJ96(r, eps, sigma):
    U = 27.0/4.0*eps*((sigma/r)**9-(sigma/r)**6)
    F = 27.0/4.0*eps*((-9.*sigma**9/r**10)-(-6.*sigma**6/r**7))
    return U, F

def LJ126(r, eps, sigma):
    U = 4.0*eps*((sigma/r)**12-(sigma/r)**6)
    F = 4.*eps*((6*sigma**6/r**7)-(12*sigma**12/r**13))
    return U, F

def LJrep(r, eps, sigma):
    #rmin = 2.**(1/6.)*sigma
    rmin = sigma
    sigma = rmin/2.**(1/6.)
    Utmp = 4.0*eps*((sigma/r)**12-(sigma/r)**6) + eps
    D = -Utmp[r>=rmin]
    Z2 = np.zeros(Utmp[r<rmin].size)
    U = np.concatenate((Z2,D)) + Utmp
    F = 4.*eps*((6*sigma**6/r**7)-(12*sigma**12/r**13))
    F[r>rmin] = 0.0
    return U, F

def shift_to_zero(r,U):
    U = U - U[np.isclose(r,R_CUTOFF)]
    return U - np.concatenate((np.zeros(r[r<R_CUTOFF].size),U[r>=R_CUTOFF]))

def apply_cutoff_F(r,F):
    F[r > r[np.isclose(r,R_CUTOFF)]] = 0.0
    return F

choice = "126"
if len(sys.argv) < 4: help()
elif len(sys.argv) > 4:
    choice = sys.argv[4]
    if len(sys.argv) == 6:
        R_CUTOFF = float(sys.argv[5])
    elif len(sys.argv) == 7:
        R_CUTOFF = float(sys.argv[5])
        style = sys.argv[6]
        if not style in style_list:
            print "Style not correct! Choose either -gro OR -lmp!"
            sys.exit(1)

#print len(sys.argv), choice

eps = float(sys.argv[1])
sigma = float(sys.argv[2])
foutname = sys.argv[3]

minr = 0.0
maxr = 5.0
stepr = 0.002
dummy = 1e-4
r = np.arange(minr,maxr+dummy,stepr)

if choice == "126":
    U, F = LJ126(r, eps, sigma)
elif choice == "124":
    U, F = LJ124(r, eps, sigma)
elif choice == "1210":
    U, F = LJ1210(r, eps, sigma)
elif choice == "96":
    U, F = LJ96(r, eps, sigma)
elif choice == "cos96":
    U, F = LJcos96(r, eps, sigma)
elif choice == "cos126":
    U, F = LJcos126(r, eps, sigma)
elif choice == "rep":
    U, F = LJrep(r, eps, sigma)
else:
    print "Unknown choice! Choices are: ", ', '.join(CHOICELIST)
    sys.exit(1)

Z = np.zeros(r.size)
U[np.isnan(U)] = MAX
F[np.isnan(F)] = 0
U[U>MAX] = MAX
F[F<-MAX] = 0
U = shift_to_zero(r,U)
F = apply_cutoff_F(r,F)

info = "%s\nfunction %s epsilon %.3f sigma %.3f cutoff %.3f\n" %(datetime.now().strftime("%d/%m/%y %H:%M"),choice, eps, sigma, R_CUTOFF)

if style == "-gro":
    A = np.column_stack((r,Z,Z,Z,Z,U,-F))
    fmt = "%.4e"
    header = info
elif style == "-lmp":
    A = np.column_stack((range(1,r.size),r[1:],U[1:],-F[1:]))
    fmt = "%d %.3f %.4e %.4e"
    header = "%s\nPAIR\nN %d\n" %(info,r.size-1)
np.savetxt(foutname,A,fmt=fmt,header=header)
print "%s generated with LJ %s!" %(foutname,choice)
