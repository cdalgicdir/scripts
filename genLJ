#! /usr/bin/python

import numpy as np
import sys

np.seterr(divide='ignore',invalid='ignore')
MAX = 1e6
R_CUTOFF = 1.4
CHOICELIST = ["126","124","96","cos96","cos126","rep"]

def help():
    print "Usage: genLJ epsilon sigma table.xvg [choice]"
    print "Choices are: ", ', '.join(CHOICELIST), "! 126 is default."
    sys.exit(0)

def LJcos96(r, eps, sigma):
    rmin = (3./2.)**(1./3)*sigma
    U = LJ96(r[r<=rmin],eps,sigma)
    D = -eps*(np.cos(np.pi/2/(R_CUTOFF-rmin)*(r[r>rmin]-rmin)))**2
    return np.concatenate((U,D))

def LJcos126(r, eps, sigma):
    rmin = 2.**(1/6.)*sigma
    U = LJ126(r[r<=rmin],eps,sigma)
    D = -eps*(np.cos(np.pi/2/(R_CUTOFF-rmin)*(r[r>rmin]-rmin)))**2
    return np.concatenate((U,D))

def LJ124(r, eps, sigma):
    return np.sqrt(27.)/2.*eps*((sigma/r)**12-(sigma/r)**4)

def LJ96(r, eps, sigma):
    return 27.0/4.0*eps*((sigma/r)**9-(sigma/r)**6)

def LJ126(r, eps, sigma):
    return 4.0*eps*((sigma/r)**12-(sigma/r)**6)

def LJrep(r, eps, sigma):
    rmin = 2.**(1/6.)*sigma
    Utmp = 4.0*eps*((sigma/r)**12-(sigma/r)**6) + eps
    D = -Utmp[r>=rmin]
    Z2 = np.zeros(Utmp[r<rmin].size)
    U = np.concatenate((Z2,D)) + Utmp
    return U

def shift_to_zero(r,U):
    U = U - U[np.isclose(r,R_CUTOFF)]
    return U - np.concatenate((np.zeros(r[r<R_CUTOFF].size),U[r>=R_CUTOFF]))

if len(sys.argv) < 3: help()
print len(sys.argv)
eps = float(sys.argv[1])
sigma = float(sys.argv[2])
foutname = sys.argv[3]
if len(sys.argv) > 4: choice = sys.argv[4]
else: choice = "126"

minr = 0.0
maxr = 2.5
stepr = 0.002
dummy = 1e-4
r = np.arange(minr,maxr+dummy,stepr)

if choice == "126":
    V = LJ126(r, eps, sigma)
elif choice == "124":
    V = LJ124(r, eps, sigma)
elif choice == "96":
    V = LJ96(r, eps, sigma)
elif choice == "cos96":
    V = LJcos96(r, eps, sigma)
elif choice == "cos126":
    V = LJcos126(r, eps, sigma)
elif choice == "rep":
    V = LJrep(r, eps, sigma)
else:
    print "Unknown choice! Choices are: ", ', '.join(CHOICELIST)

Z = np.zeros(r.size)
V[np.isnan(V)] = MAX
V[V>MAX] = MAX
V = shift_to_zero(r,V)

A = np.column_stack((r,Z,Z,Z,Z,V,Z))
np.savetxt(foutname,A,fmt='%.4e')
print "%s generated with LJ %s" %(foutname,choice)
