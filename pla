#! /bin/bash

###################################################################
# plot multiple files in gnuplot using bash wildcards
###################################################################

lw=3
pointsize="0.01"
#linetype="points"
linetype="lines"
#linetype="linespoints"
using=" u 1:2 "
q="'"
potfile="*.pot.*"
tabfile="*table*xvg"
max=30
label=1
keypos=''
plotfiles=''
terminal='set terminal wxt'
range=[:][:]
userset="false"
doshift=0
entcorr=0
kT=2.4777 #for T=298K
#kT=2.4943 #for T=300

plot () {
    gplot $output  -c "${extra}" -c "$keypos" -c "$terminal" -r $range -- "$plotfiles"
}

printcommands () {
    if [[ $noplottab == true ]]; then
	#echo "plot $plotfiles" | sed 's/,/,\\\n /g'
	echo -e "plot\\\\\n $plotfiles" | sed 's/,/,\\\n /g'
    else
	echo "plot $plotfiles"
    fi
}

help () {
    echo "Usage: $ pla file1 file2 file3"
    echo "       $ pla file*             (sames as above)"
    echo "       $ pla file* 4           (uses 4th column)"
    echo "       $ pla file* u 4         (uses 4th column)"
    echo "       $ pla file* -y 2        (sets max yrange)"
    echo "Needs: gplot script from C. Junghans"
}

die() {
  echo -e "$*" >&2
  exit 1
}

###################################################################
# Check taken from gplot script of C. Junghans
###################################################################

if [ "${1#'['}" != "$1" ]; then
   #check for [??:??] or [??:??]{??:??}
   [ -n "$(echo "$1" | grep -e '^\(\[[-.eE[:digit:]]*:[-.eE[:digit:]]*\]\)\{1,2\}$')" ] ||
     die "Range ('$1') has to be in form [??:??]\<[??:??]\>"
   range=$1
   shift
fi

###################################################################
# End of check
###################################################################


while [[ $# -ge 1 ]]; do
    case $1 in
	u)
	    if [[ "${2}" == *:* ]]; then
		x="${2}"
		xl=(${x//:/ })
		using=' u '"${xl[0]}"':'"${xl[1]}"
	    fi
	    userset="true"
	    #using=" u 1:${2} "
	    shift 2;;

	-n | -nop | -noplot)
	    noplot=true
	    noplottab=false
	    shift 1;;

	-nt | -nopt)
	    noplot=true
	    noplottab=true
	    shift 1;;

	w)
	    linetype=$2
	    shift 2;;

	ps)
	    pointsize=$2
	    shift 2;;

	lw)
	    lw=$2
	    shift 2;;

	-y)
	    range="[:][:$2]"
	    shift 2;;

	-nxy)
	    nxy=1
	    shift ;;

	not)
	    label=0
	    shift 1;;

	-keyout|-ko)
	    keypos='set key out'
	    shift 1;;

	-keybot|-kb)
	    keypos='set key right bottom'
	    shift 1;;

	-keyleft|-kl)
	    keypos='set key left'
	    shift 1;;

	-dih)
	    range="[-180:180][:]"
	    extra="set xtics 60;set xlabel 'Dihedral angle (degrees)';set ylabel 'Probability'"
	    shift 1;;

	-rama)
	    terminal=$terminal' enhanced'
	    range="[-180:180][-180:180]"
	    extra="set xtics 60;set ytics 60;set xlabel '{/Symbol f} (degrees)';set ylabel '{/Symbol y} (degrees)'"
	    shift 1;;

	-dashed|-dash)
	    terminal=$terminal' dashed'
	    shift 1;;

	-pdf)
	    terminal='set terminal pdfcairo font "Gill Sans,12" linewidth 3 rounded'
	    output='-o out.pdf'
	    echo "Generating out.pdf"
	    shift 1;;

	-shift)
	    doshift=1
	    keypos='set key right bottom'
	    shift;;

	-entcorr|-ec)
	    doentcorr=1
	    shift;;
	    
	-pmf)
	    doshift=1
	    doentcorr=1
	    keypos='set key right bottom'
	    shift;;

	[0-9]|[0-9][0-9])
	    using=" u 1:${1} "
	    userset="true"
	    shift ;;

	-h | -help | --help | --h)
	    help
	    exit 0
	    ;;
	*)
	    filelist=(${filelist[@]} $1)
	    shift ;;

    esac
done

# shift to zero for PMFs (only works for the second column
if [[ $doshift == 1 ]]; then
    shiftlist=()
    shiftRlist=()
    for f in ${filelist[@]}; do
	shiftR=`tail -1 ${f} | awk '{print $1}'`
	shift=`tail -1 ${f} | awk '{print $2}'`
	shiftRlist+=("$shiftR")
	shiftlist+=("$shift")
    done
fi

# linetypes
if [ $linetype == "lines" ] || [ $linetype == "l" ] ; then
    with=" with $linetype lw $lw "
elif [ $linetype == "points" ] || [ $linetype == "p" ]; then
    with=" with $linetype ps $pointsize "
elif [[ $linetype == "yerror" ]]; then
    using=" u 1:2:3 "
else
    with=" with $linetype "
fi

i=0
for file in ${filelist[@]}
do
    if [[ -f $file ]]; then
	if [[ $file == $tabfile && $file != *table_d*.xvg && $file != *table_a*.xvg && $file != *table_b*.xvg ]]; then
	    if [[ $userset == "false" ]]; then
		using=" u 1:6 "
		#ymax=1.5
		[[ $range == "[:][:]" ]] && range="[:][:5]"
	    fi
	fi
	# shift to zero and entropic correction (for second cols only)
	if [[ $doshift == 1 ]] && [[ $doentcorr == 0 ]]; then
	    theshift=${shiftlist[$i]} 
	    using=" u 1:(\$2-$theshift) "
	elif [[ $doshift == 0 ]] && [[ $doentcorr == 1 ]]; then
	    using=" u 1:(\$2+2*$kT*log(\$1)) "
	elif [[ $doshift == 1 ]] && [[ $doentcorr == 1 ]]; then
	    theshift=${shiftlist[$i]} 
	    theshiftR=${shiftRlist[$i]} 
	    using=" u 1:(\$2+2*$kT*(log(\$1/$theshiftR))-$theshift) "
	fi

	if [[ $nxy == 1 ]]; then
	    NF=`tail -1 ${file} | awk '{print NF}'`
	    for i in `seq 2 $NF`; do
		using=" u 1:$i "
		plotfiles=${plotfiles}${q}${file}${q}${using}${with}
		if [[ $label == 1 ]]; then
		    plotfiles=$plotfiles't '$q${i}$q',' 
		else
		    plotfiles=$plotfiles'not,'
		fi
	    done
	else
	    plotfiles=${plotfiles}${q}${file}${q}${using}${with}
	    if [[ $label == 1 ]]; then
		plotfiles=$plotfiles't '$q$file$q',' 
	    else
		plotfiles=$plotfiles'not,'
	    fi
	fi
	let i=i+1
    fi
done

# remove comma at the end of command
plotfiles=${plotfiles:0:$((${#plotfiles}-1))}

# finally plot all
if [[ $noplot == true ]]; then
    printcommands
else
    plot $range $plotfiles
fi
#echo $plotfiles
