#! /bin/bash

###################################################################
# plot multiple files in gnuplot using bash wildcards
###################################################################

lw=6
lwset=false
pointsize="0.2"
#linetype="points"
linetype="lines"
#linetype="linespoints"
using=" u 1:2 "
q="'"
potfile="*.pot.*"
tabfile="*table*xvg"
max=30
label=1
keypos=''
plotfiles=''
terminal=''
#terminal='set terminal wxt'
range=[:][:]
userset=false
doshiftend=false
doshiftmin=false
doshiftmax=false
doshiftval=false
doshifting=false
doentcorr=false
kT=2.4777 #for T=298K
#kT=2.4943 #for T=300
sas=false
functions=""
column=2
every=1
colslist=()
noplot=false
convert2ns=false
usersetlabels=false
userrangeset=false
termoptions=""
labelsfromfile=false
thetitle=""
titlesmall=false

plot () {
    gplot $output -t "${thetitle}" -c "${style}" -c "${functions}"  -c "${extra}" -c "$keypos" -c "$terminal" -r $range -- "$plotfiles"
}

printcommands () {
    if $noplottab; then
	#echo "plot $plotfiles" | sed 's/,/,\\\n /g'
	echo -e "${functions[@]}\nplot\\\\\n $plotfiles" | sed 's/,/,\\\n /g'
    else
	echo -e "${functions[@]}\nplot $plotfiles"
    fi
}

help () {
    echo "Usage: $ pla file1 file2 file3"
    echo "       $ pla file*             (sames as above)"
    echo "       $ pla file* 4           (uses 4th column)"
    echo "       $ pla file* u 4         (uses 4th column)"
    echo "       $ pla file* -y 2        (sets max yrange)"
    echo "       $ pla [0:100][-10:10] file* (sets ranges)"
    echo "       $ pla file1 file2 -t \"label1,label2\"  (sets labels)"
    echo "       $ pla file1 file2 -t \".,label2\"  (auto labelling for first file)"
    echo "       $ pla file* -ang (range is set to 0:180 and labeling done)"
    echo "       $ pla file* -ange (enhanced version of -ang option)"
    echo "       $ pla file* -dih/-dihe (for dihedrals)"
    echo "       $ pla file* -cm/-cummean (plots cumulative mean)"
    echo "       $ pla file* -ma/-movavg (plots moving average)"
    echo "       $ pla file* -mac (-ma and -cm combined)"
    echo "       $ pla file* -shift (final points of plots are shifted to zero)"
    echo "       $ pla file* -shiftmin (minimum points of plots are shifted to zero)"
    echo "       $ pla file* -shiftmax (maximum points of plots are shifted to zero)"
    echo "       $ pla file* -shiftval 1 (specified points of plots are shifted to zero)"
    echo "       $ pla file* -entcorr (entropic correction applied)"
    echo "       $ pla file* -pmf (shifting done, entropic correction applied)"
    echo "       $ pla file* -pdf (saves as out.pdf)"
    echo "       $ pla file* -png (saves as out.png)"
    echo "       $ pla file* -gp (saves as gnuplot file out.gp)"
    echo "       $ pla file* -rama (for drawing Ramachandran map)"
    echo "       $ pla file* -dash/-dashed (adds dashed option to terminal)"
    echo "       $ pla file* -keyout/-ko (key is out of the plot)"
    echo "       $ pla file* -keybot/-kb (key is at the bottom)"
    echo "       $ pla file* -keyleft/-kl (key is at the left)"
    echo "       $ pla file* -keyhor/-kh (key is horizontal)"
    echo "       $ pla file* -sas (for drawing SASA)"
    echo "       $ pla file* -nxy (plots every column of the file starting from 2nd)"
    echo "       $ pla file* not (no key labeling)"
    echo "       $ pla file* lw 3 (set linewidth to 3)"
    echo "       $ pla file* ps 3 (set pointsize to 3)"
    echo "       $ pla file* -ns (convert ps to ns for x-dimension)"
    echo "       $ pla file* -n/-nop/-noplot (print out command to plot)"
    echo "       $ pla file* -nt/-nopt (print out command to plot with tabs)"
    echo "       $ pla file* u 3 (plot files using column 3)"
    echo "       $ pla file* 3 (plot files using column 3)"
    echo "       $ pla file* w lw/p/l (plot files using with linetype lw/p/l etc)"
    echo "       $ pla file* -al[-autolabel] (automatic labeling of files with Xmgrace convention)"
    echo "       $ pla file* -xl[-xlabel] \"r\" -yl[-ylabel] \"V(r)\" (x and y labeling)"
    echo "       $ pla file* -e (enhanced term for Greek, Cyrillic or mathematical characters)"
    echo "       $ pla -h/--help/-help/--h (print this help)"
    echo "Needs: gplot script from C. Junghans"
}

die() {
  echo -e "$*" >&2
  exit 1
}

genfunc() {
    n=$1
    p1=" avg(x) = (shift(x), ("
    p2=""
    p3="init(x) = ("
    for i in `seq 1 $((n-1))`; do
	p1=$p1"back$i+"
	[[ $i -gt 1 ]] && p2="back$i = back$((i-1)), "$p2
	p3=$p3"back$i = "
    done
    p1=$p1"back$n)/samples(\$0));"
    p2="shift(x) = (back$n = back$((n-1)),"$p2"back1 = x);"
    p3=$p3"back$n = sum = 0)"
    comm="samples(x) = \$0 > $((n-1)) ? $n : (\$0+1);${p1}${p2}${p3}"
    echo $comm
}

isnumber() {
    printf '%f' "$1" &>/dev/null && echo "$1" || echo "-1";
}

###################################################################
# Check taken from gplot script of C. Junghans
###################################################################

if [ "${1#'['}" != "$1" ]; then
   #check for [??:??] or [??:??]{??:??}
   [ -n "$(echo "$1" | grep -e '^\(\[[-.eE[:digit:]]*:[-.eE[:digit:]]*\]\)\{1,2\}$')" ] ||
     die "Range ('$1') has to be in form [??:??]\<[??:??]\>"
   range=$1 && userrangeset=true
   shift
fi

###################################################################
# End of check
###################################################################


while [[ $# -ge 1 ]]; do
    case $1 in
	u)
	    if [[ "${2}" == *:* ]]; then
		x="${2}"
		xl=(${x//:/ })
		using=' u '"${xl[0]}"':'"${xl[1]}"
		column=${xl[1]}
		colslist+=(${x})
	    else
		using=" u $2 "
		column=$2
		colslist+=($column)
	    fi
	    userset=true
	    #using=" u 1:${2} "
	    shift 2;;

	-n | -nop | -noplot)
	    noplot=true
	    noplottab=false
	    shift 1;;

	-nt | -nopt)
	    noplot=true
	    noplottab=true
	    shift 1;;

	-ns)
	    convert2ns=true
	    extra="set xlabel 'Time (ns)'"
	    shift 1;;

	w)
	    linetype=$2
	    shift 2;;

	ps)
	    pointsize=$2
	    shift 2;;

	lw)
	    lw=$2
	    lwset=true
	    shift 2;;

	ev|every)
	    every=$2
	    shift 2;;

	-y)
	    range="[:][:$2]"
	    shift 2;;

	-yl)
	    extra="$extra;set ylabel \"$2\""
	    shift 2
	    ;;

	-xl)
	    extra="$extra;set xlabel \"$2\""
	    shift 2
	    ;;

	-nxy)
	    nxy=1
	    shift ;;

	-sas)
	    sas=true
	    linetype="points ps 1"
	    extra="set xlabel \"Time (ns)\";set ylabel \"SASA (nm^2)\";set term wxt enhanced"
	    shift ;;

	not)
	    label=0
	    shift 1;;

	-keyout|-ko)
	    keypos='set key out'
	    shift 1;;

	-keybot|-kb)
	    keypos='set key right bottom'
	    shift 1;;

	-keyleft|-kl)
	    keypos='set key left reverse Left'
	    shift 1;;

	-keyhor|-kh)
	    keypos='set key center top samplen 2 width -1.5 height -2 horizontal'
	    shift 1;;

	-dihe)
	    $userrangeset || range="[-180:180][:]"
	    termoptions="$termoptions enhanced"
	    extra="set xtics 45;set xlabel '{/Symbol f}';set ylabel 'P({/Symbol f})'"
	    shift 1;;

	-dih)
	    $userrangeset || range="[-180:180][:]"
	    extra="set xtics 45;set xlabel 'angle';set ylabel 'Probability'"
	    shift 1;;

	-ange)
	    $userrangeset || range="[0:180][:]"
	    termoptions="$termoptions enhanced"
	    extra="set xtics 30;set xlabel '{/Symbol q}';set ylabel 'P({/Symbol q})'"
	    shift 1;;

	-ang)
	    $userrangeset || range="[0:180][:]"
	    extra="set xtics 30;set xlabel 'angle';set ylabel 'Probability'"
	    shift 1;;

	-rama)
	    termoptions="$termoptions enhanced"
	    range="[-180:180][-180:180]"
	    extra="set xtics 60;set ytics 60;set xlabel '{/Symbol f} (degrees)';set ylabel '{/Symbol y} (degrees)'"
	    shift 1;;

	-dashed|-dash)
	    termoptions="$termoptions dashed"
	    #terminal=$terminal' dashed'
	    shift 1;;

	-e|-enhanced)
	    termoptions="$termoptions enhanced"
	    shift
	    ;;

	-pdf)
	    $lwset && lw=$lw || lw=3
	    terminal='set terminal pdfcairo font "Gill Sans,16" linewidth '"$lw"' rounded'
	    [[ $2 == *.pdf ]] && outfile="$2" && shift || outfile="out.pdf"
	    output="-o ${outfile}"
	    echo "Generating $outfile!"
	    shift 1;;

	-png)
	    $lwset && lw=$lw || lw=3
	    terminal='set terminal pngcairo font "Gill Sans,24" linewidth '"$lw"' rounded size 800,600'
	    [[ $2 == *.png ]] && outfile="$2" && shift || outfile="out.png"
	    output="-o ${outfile}"
	    echo "Generating $outfile!"
	    shift 1;;

	-gp)
	    outgp=true
	    [[ $2 == *.gp ]] && outfile="$2" && shift || outfile="out.gp"
	    gpcomm="save \"${outfile}\""
	    echo "Generating $outfile!"
	    shift 1;;

	-shiftmax)
	    doshiftmax=true
	    doshifting=true
	    #keypos='set key right bottom'
	    shift;;

	-shiftmin)
	    doshiftmin=true
	    doshifting=true
	    #keypos='set key right bottom'
	    shift;;

	-shiftval)
	    doshiftval=true
	    doshifting=true
	    shiftXval=$2
	    #keypos='set key right bottom'
	    shift 2;;

	-shift)
	    doshiftend=true
	    doshifting=true
	    keypos='set key right bottom'
	    shift;;

	-entcorr|-ec)
	    doentcorr=true
	    extra="set xlabel 'r (nm)';set ylabel 'V(r) (kJ/mol)'"
	    shift;;
	    
	-pmf)
	    doshiftend=true
	    doshifting=true
	    doentcorr=true
	    keypos='set key right bottom'
	    extra="set xlabel 'r (nm)';set ylabel 'V(r) (kJ/mol)'"
	    shift;;

	-table)
	    extra="set xlabel 'r (nm)';set ylabel 'V(r) (kJ/mol)'"
	    shift;;

	-movavg|-ma)
	    domovavg=1
	    if [[ $# -gt 1 ]]; then
		[[ `isnumber $2` != -1 ]] && n="$2" && shift || n=5
	    else
		n=10
	    fi
	    shift
	    functions=`genfunc $n`
	    ;;

	-t | -titles)
	    usersetlabels=true
	    IFS=$';'
	    for i in ${2}; do titlelist+=( "$i" );done
	    #titlelist=(${2//;/ })
	    IFS=$' \t\n'
	    k=0
	    shift 2
	    ;;

	-tf | -titlefile)
	    usersetlabels=true
	    while read line; do titlelist+=($line);done < $2
	    k=0
	    shift 2
	    ;;

	-ts | -titlesmall)
	    titlesmall=true
	    extra='set key samplen 2 spacing 0.7 width 0 height 0 font "Gill Sans, 12"'
	    shift;;

	-tt|-thetitle)
	    thetitle="$2"
	    shift 2
	    ;;

	-cm|-cummean)
	    docummean=1
	    [[ $functions == "" ]] && functions='sum=0'
	    shift;;

	-mac)
	    docummean=1 && domovavg=1
	     if [[ $# -gt 1 ]]; then
		[[ `isnumber $2` != -1 ]] && n="$2" || n=5
		shift 2
	    else
		n=5
		shift
	    fi
	    functions=`genfunc $n`
	    ;;

	-autolabel|-al)
	    labelsfromfile=true
	    #titlelist=(`grep -i -w s[0-9] $1 | awk '{print $4}'`)
	    k=0
	    shift
	    ;;


	[0-9]|[0-9][0-9])
	    column=$1
	    #using=" u 1:${1} "
	    userset=true
	    colslist+=("1:$column")
	    shift ;;

	-h | -help | --help | --h)
	    help
	    exit 0
	    ;;
	*)
	    filelist=(${filelist[@]} $1)
	    shift ;;

    esac
done

if [[ ${#filelist[@]} == 1 ]] && [[ ! -f ${filelist[0]} ]]; then echo "File not found!" && exit 1;fi

style="do for [i=1:20] { set style line i linewidth $lw }"
ev=" every ${every}"

# shift to zero for PMFs (only works for the second column
if $doshifting; then
    shiftlist=()
    shiftRlist=()
    for f in ${filelist[@]}; do
	if $doshiftend; then
	    shiftR=`tail -1 ${f} | awk '{print $1}'`
	    [[ $shiftR == "" ]] && shiftR=`tail -2 ${f} | awk '{print $2}'`
	    shift=`tail -1 ${f} | awk '{print $2}'`
	    [[ $shift == "" ]] && shift=`tail -2 ${f} | awk '{print $2}'`
	elif $doshiftmin; then
	    tmp=`awk -v y=1e6 '!/^[@|#]/{if ($2<y){y=$2;x=$1}}END{print x,y}' ${f}`
	    tmp=(${tmp// / })
	    shiftR=${tmp[0]}
	    shift=${tmp[1]}
	elif $doshiftmax; then
	    tmp=`awk -v y=-1e6 '!/^[@|#]/{if ($2>y){y=$2;x=$1}}END{print x,y}' ${f}`
	    tmp=(${tmp// / })
	    shiftR=${tmp[0]}
	    shift=${tmp[1]}
	elif $doshiftval; then
	    tmp=`awk -v val=$shiftXval -v eps=0.009 '!/^[@|#]/{if ($1<val+eps && $1>val-eps){print $2}}' ${f}`
	    tmp=(${tmp// / })
	    shiftR=${shiftXval}
	    shift=${tmp[0]}
	fi
	shiftRlist+=("$shiftR")
	shiftlist+=("$shift")
    done
fi

# linetypes
if [ "${linetype}" == "lines" ] || [ "${linetype}" == "l" ] ; then
    with=" with $linetype "
    #with=" with $linetype lw $lw "
elif [ "${linetype}" == "points" ] || [ "${linetype}" == "p" ] || [ "${linetype}" == "linepoints" ] || [ "${linetype}" == "lp" ]; then
    with=" with $linetype ps $pointsize "
elif [[ $linetype == *yer* ]]; then
    using=" u 1:2:3 "
    with=" with $linetype "
else
    with=" with $linetype "
fi

i=0
for file in ${filelist[@]}
do
    $userset || colslist=()
    if [[ -f $file ]]; then
	if [[ $file == $tabfile && $file != *table_d*.xvg && $file != *table_a*.xvg && $file != *table_b*.xvg ]]; then
	    if ! $userset ; then
		colslist+=("1:6")
		#ymax=1.5
		[[ $range == "[:][:]" ]] && range="[:][:20]"
	    fi
	fi
	
	if [[ $nxy == 1 ]]; then
	    NF=`tail -1 ${file} | awk '{print NF}'`
	    for i in `seq 2 $NF`; do
		column=$i
		using=" u 1:$column "
		plotfiles=${plotfiles}${q}${file}${q}${ev}${using}${with}
		if [[ $label == 1 ]]; then
		    if $labelsfromfile; then
			#titlelist=(`grep -i -w s[0-9] $file | awk '{$1=$2=$3="";print $0}' | tr -d '"'`)
			title_label=(`grep -i -w s$((column-2)) $file | awk '{$1=$2=$3="";print $0}' | tr -d '"'`)
			#echo $column ${title_label[@]}
			#title_label=${titlelist[$((column-2))]}
			#echo ${title_label[@]}
			title="t ${q}${title_label[@]}${q}, "
			#echo ${title[@]}
			plotfiles=$plotfiles${title}
		    else
			#plotfiles=$plotfiles't '$q${i}$q',' 
			plotfiles=$plotfiles't '$q$((i-1))$q',' 
		    fi
		else
		    plotfiles=$plotfiles'not,'
		fi
	    done
	elif [[ $sas == true ]]; then
	    plotfiles=${plotfiles}${q}${file}${q}${ev}" using (\$1/1000):2 "${with}" t 'hydrophobic','' ${ev} using (\$1/1000):3 "${with}" t 'hydrophilic','' ${ev} using (\$1/1000):4 "${with}" t 'total',"
	else
	    [[ ${#colslist[@]} -eq 0 ]] && colslist=("1:2")
	    for j in ${colslist[@]}; do
		if [[ "${j}" == *:* ]]; then
		    xl=(${j//:/ })
		    column0=${xl[0]}
		    column=${xl[1]}
		else
		    #using=" u 1:${j} "
		    column=${j}
		fi
		using=" u ${j} "

###################################################################
	    theshift=${shiftlist[$i]} 
	    theshiftR=${shiftRlist[$i]} 
	    # shift to zero and entropic correction (for second cols only)
	    if $doshifting && ! $doentcorr; then
		using=" u $column0:(\$$column-$theshift) "
		echo "Shifting ${file} by $theshift (at $theshiftR)"
	    elif ! $doshifting && $doentcorr; then
		using=" u $column0:(\$$column+2*$kT*log(\$1)) "
	    elif $doshifting && $doentcorr; then
		using=" u $column0:(\$$column+2*$kT*(log(\$1/$theshiftR))-$theshift) "
	    fi
###################################################################

	    if $convert2ns; then
		using2=${using:3}
		a=(${using2//:/ })
		[[ ${#a[@]} -gt 1 ]] && using=" u (\$${a[0]}/1000):${a[1]} "
	    fi
		plotfiles=${plotfiles}${q}${file}${q}${ev}${using}${with}
	    if [[ $label == 1 ]]; then
		[[ ${#colslist[@]} -gt 1 ]] && titlextra="-${j}" | titlextra=""
		if $usersetlabels; then
		    [[ ${titlelist[$k]} == "." ]] && title_label="${file}" || title_label=${titlelist[$k]}
		    title="t ${q}${title_label}${q}, "
		    let k=k+1
		elif $labelsfromfile; then
		    titlelist=(`grep -i -w s[0-9] $file | awk '{print $4}' | tr -d '"'`)
		    title_label=${titlelist[$((column-2))]}
		    title="t ${q}${title_label}${q}, "
		else
		    title='t '${q}${file}${titlextra}${q}','
		fi
	    else
		title='not,'
	    fi
	    plotfiles=${plotfiles}${title}
	    [[ $domovavg == 1 ]] && plotfiles="${plotfiles}sum = init(0), '' every ::$((n))::-1 using 1:(avg(\$$column)) w l title 'running mean-$n',"
	    [[ $docummean == 1 ]] && plotfiles="${plotfiles}sum=0,'' using 1:(sum = sum + \$$column, sum/(\$0+1)) w l title 'cumulative mean',"
	    done
	fi
	let i=i+1
    fi
done

# remove comma at the end of command
plotfiles=${plotfiles:0:$((${#plotfiles}-1))}

# finally plot all
if $noplot; then
    printcommands
else
    if $outgp; then
	plotfiles="${plotfiles[@]}"";$gpcomm"
    fi
    [[ $terminal == "" ]] && terminal="set term wxt $termoptions" || terminal="$terminal $termoptions"
    plot $range $plotfiles
fi

#echo $plotfiles
